const fs = require("fs");
const path = require("path");
const ffmpeg = require("fluent-ffmpeg");

const inputDir = path.join(__dirname, "input");  // –ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
const outputDir = path.join(__dirname, "output"); // –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
const inputImage = path.join(__dirname, "background.jpg"); // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ output —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
function processAudioFile(audioFile) {
    const inputAudio = path.join(inputDir, audioFile);
    const outputVideo = path.join(outputDir, `${path.parse(audioFile).name}.mp4`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    ffmpeg(inputAudio).ffprobe((err, metadata) => {
        if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${audioFile}:`, err);
            return;
        }

        const audioDuration = metadata.format.duration;

        ffmpeg()
            .input(inputImage)
            .loop(audioDuration) // –§–æ–Ω –Ω–∞ –≤—Å—é –¥–ª–∏–Ω—É –∞—É–¥–∏–æ
            .input(inputAudio)
            .outputOptions([
                "-c:v libx264",
                "-tune stillimage",
                "-c:a aac",
                "-b:a 192k",
                "-shortest",
                "-vf scale=trunc(iw/2)*2:trunc(ih/2)*2"
            ])
            .save(outputVideo)
            .on("end", () => console.log(`‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${outputVideo}`))
            .on("error", (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${audioFile}:`, err));
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input
function processAllAudioFiles() {
    fs.readdir(inputDir, (err, files) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ input:", err);
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ mp3-—Ñ–∞–π–ª—ã
        const audioFiles = files.filter(file => file.endsWith(".mp3"));

        if (audioFiles.length === 0) {
            console.log("‚ùå –í –ø–∞–ø–∫–µ input –Ω–µ—Ç MP3 —Ñ–∞–π–ª–æ–≤.");
            return;
        }

        console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${audioFiles.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...`);
        audioFiles.forEach(processAudioFile);
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
processAllAudioFiles();
