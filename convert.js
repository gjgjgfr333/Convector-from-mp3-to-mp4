const fs = require("fs");
const path = require("path");
const ffmpeg = require("fluent-ffmpeg");

const inputDir = path.join(__dirname, "input");
const outputDir = path.join(__dirname, "output");
const inputImage = path.join(__dirname, "background.jpg");
const outputAudio = path.join(outputDir, "combined.mp3");
const outputVideo = path.join(outputDir, "final_video.mp4");

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ output —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
}

// –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
function createConcatList(audioFiles, listPath) {
    const content = audioFiles
        .map(file => `file '${path.join(inputDir, file).replace(/\\/g, "/")}'`)
        .join("\n");
    fs.writeFileSync(listPath, content);
}

// –®–∞–≥ 2: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö mp3 –≤ –æ–¥–∏–Ω
function concatAudioFiles(audioFiles, callback) {
    const listFile = path.join(outputDir, "concat_list.txt");
    createConcatList(audioFiles, listFile);

    ffmpeg()
        .input(listFile)
        .inputOptions("-f", "concat", "-safe", "0")
        .outputOptions("-c", "copy")
        .on("end", () => {
            console.log("‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.");
            callback();
        })
        .on("error", err => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:", err);
        })
        .save(outputAudio);
}

// –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
function createFinalVideo() {
    ffmpeg.ffprobe(outputAudio, (err, metadata) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ:", err);
            return;
        }

        const duration = metadata.format.duration;

        ffmpeg()
            .input(inputImage)
            .loop(duration)
            .input(outputAudio)
            .outputOptions([
                "-c:v libx264",
                "-tune stillimage",
                "-c:a aac",
                "-b:a 192k",
                "-shortest",
                "-vf scale=trunc(iw/2)*2:trunc(ih/2)*2"
            ])
            .save(outputVideo)
            .on("end", () => console.log(`üéâ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${outputVideo}`))
            .on("error", err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:", err));
    });
}

// –®–∞–≥ 4: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function processAll() {
    fs.readdir(inputDir, (err, files) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ input:", err);
            return;
        }

        const audioFiles = files.filter(file => file.endsWith(".mp3"));

        if (audioFiles.length === 0) {
            console.log("‚ö†Ô∏è –ù–µ—Ç MP3 —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input.");
            return;
        }

        console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${audioFiles.length} MP3. –û–±—ä–µ–¥–∏–Ω—è–µ–º...`);
        concatAudioFiles(audioFiles, createFinalVideo);
    });
}

// –ó–∞–ø—É—Å–∫
processAll();
