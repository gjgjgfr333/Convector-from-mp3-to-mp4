import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { parseFile } from 'music-metadata';

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export async function getAudioMetadata(folderPath, imageSourcePath) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    folderPath = path.resolve(folderPath);
    imageSourcePath = path.resolve(imageSourcePath);

    console.log("–ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏:", folderPath);
    console.log("–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:", imageSourcePath);

    try {
        const files = await fs.promises.readdir(folderPath);
        const audioFiles = files.filter(file => /\.(mp3|flac|m4a|ogg|wav)$/i.test(file));

        const result = [];

        // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É img –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
        const imgDir = path.join(__dirname, 'img');
        if (!fs.existsSync(imgDir)) {
            fs.mkdirSync(imgDir, { recursive: true }); // recursive: true —Å–æ–∑–¥–∞—ë—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        const imageFiles = await fs.promises.readdir(imageSourcePath);
        const filteredImageFiles = imageFiles.filter(file =>
            /\.(jpg|jpeg|png|jfif)$/i.test(file)
        );

        console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", filteredImageFiles);

        if (filteredImageFiles.length === 0) {
            console.warn('‚ùó –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', imageSourcePath);
        }

        for (let i = 0; i < audioFiles.length; i++) {
            const file = audioFiles[i];
            const filePath = path.join(folderPath, file);
            try {
                const metadata = await parseFile(filePath);
                const common = metadata.common;

                const name = common.title || path.parse(file).name;
                const description = common.album || '';
                const author = common.artist || '';

                const item = {
                    name: { en: name, hi: "" },
                    description: { en: description, hi: "" }
                };

                if (author) {
                    item.author = author;
                }

                result.push(item);

                // –í—ã–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (filteredImageFiles.length > 0) {
                    const imageIndex = i % filteredImageFiles.length; // –ß–µ—Ä–µ–¥—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const originalImageName = filteredImageFiles[imageIndex];
                    const sourceImagePath = path.join(imageSourcePath, originalImageName);

                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    const ext = path.extname(originalImageName);
                    const baseName = path.basename(originalImageName, ext);

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    const safeTrackName = name.replace(/[^a-z0-9–∞-—è—ë]/gi, '_'); // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    const newImageName = `${baseName}_${safeTrackName}${ext}`;

                    const destImagePath = path.join(imgDir, newImageName);
                    fs.copyFileSync(sourceImagePath, destImagePath);
                }

            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}:`, err.message);
            }
        }


        // –ü—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É JSON —Ñ–∞–π–ª—É
        const outputPath = path.join(__dirname, 'metadata.json');

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        fs.writeFileSync(outputPath, JSON.stringify(result, null, 2), 'utf-8');
        console.log(`‚úÖ JSON-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
        console.log(`üñºÔ∏è  –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤: ${imgDir}`);

        return result;

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏:', err.message);
    }
}

// –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
getAudioMetadata('./audio', 'D:/work/Convector-from-mp3-to-mp4/img/ambientCompress');
